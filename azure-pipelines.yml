# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

name: K4A-SDK-$(SourceBranchName)-$(Date:yyyyMMdd)-$(Rev:rrr)

variables:
- name: 'skipComponentGovernaceDetection'
  value: true
- name: 'linux_firmware_version'
  value: '1.6.987014'
- name: 'windows_firmware_version'
  value: '1.6.987014'

trigger:
  batch: false
  branches:
    include:
    - master
    - develop
    - release/*
    - hotfix/*
    - feature/*

jobs:
- job: WindowsK4ABuildTest
  displayName: Win
  strategy:
    maxParallel: 100
    matrix:
      VS2017_x64-msvc_debug_ninja:
        CMakeArch: 'amd64'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'debug'
        vmImage: 'vs2017-win2016'
      VS2017_x64-msvc_rel_ninja:
        CMakeArch: 'amd64'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'relwithdebinfo'
        vmImage: 'vs2017-win2016'
      VS2017_x64-msvc_debug_msbuild:
        CMakeArch: 'amd64'
        BuildGenerator: 'Visual Studio 15 2017 Win64'
        CMakeConfiguration: 'debug'
        vmImage: 'vs2017-win2016'
      VS2017_x64-msvc_rel_msbuild:
        CMakeArch: 'amd64'
        BuildGenerator: 'Visual Studio 15 2017 Win64'
        CMakeConfiguration: 'relwithdebinfo'
        vmImage: 'vs2017-win2016'
      VS2017_x86-msvc_debug_ninja:
        CMakeArch: 'x86'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'debug'
        vmImage: 'vs2017-win2016'
      VS2017_x86-msvc_rel_ninja:
        CMakeArch: 'x86'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'relwithdebinfo'
        vmImage: 'vs2017-win2016'
      VS2017_x86-msvc_debug_msbuild:
        CMakeArch: 'x86'
        BuildGenerator: 'Visual Studio 15 2017'
        CMakeConfiguration: 'debug'
        vmImage: 'vs2017-win2016'
      VS2017_x86-msvc_rel_msbuild:
        CMakeArch: 'x86'
        BuildGenerator: 'Visual Studio 15 2017'
        CMakeConfiguration: 'relwithdebinfo'
        vmImage: 'vs2017-win2016'
      VS2019_x64-msvc_debug_ninja:
        CMakeArch: 'amd64'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'debug'
        vmImage: 'windows-2019'
      VS2019_x64-msvc_rel_ninja:
        CMakeArch: 'amd64'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'relwithdebinfo'
        vmImage: 'windows-2019'
      # VS2019 msbuild generators blocked by issue Microsoft/azure-pipelines-image-generation#754
      # VS2019_x86_64-pc-windows-msvc_debug_msbuild:
      #   CMakeArch: 'amd64'
      #   BuildGenerator: 'Visual Studio 16 2019'
      #   CMakeConfiguration: 'debug'
      #   vmImage: 'windows-2019'
      # VS2019_x86_64-pc-windows-msvc_relwithdebinfo_msbuild:
      #   CMakeArch: 'amd64'
      #   BuildGenerator: 'Visual Studio 16 2019'
      #   CMakeConfiguration: 'relwithdebinfo'
      #   vmImage: 'windows-2019'
      VS2019_x86-msvc_debug_ninja:
        CMakeArch: 'x86'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'debug'
        vmImage: 'windows-2019'
      VS2019_x86-msvc_rel_ninja:
        CMakeArch: 'x86'
        BuildGenerator: 'Ninja'
        CMakeConfiguration: 'relwithdebinfo'
        vmImage: 'windows-2019'
      # VS2019 msbuild generators blocked by issue Microsoft/azure-pipelines-image-generation#754
      # VS2019_x86-pc-windows-msvc_debug_msbuild:
      #   CMakeArch: 'x86'
      #   BuildGenerator: 'Visual Studio 16 2019'
      #   CMakeConfiguration: 'debug'
      #   vmImage: 'windows-2019'
      # VS2019_x86-pc-windows-msvc_relwithdebinfo_msbuild:
      #   CMakeArch: 'x86'
      #   BuildGenerator: 'Visual Studio 16 2019'
      #   CMakeConfiguration: 'relwithdebinfo'
      #   vmImage: 'windows-2019'
  pool:
    vmImage: $(vmImage)

  steps:
  - checkout: self
    clean: true
    fetchDepth: 20
    lfs: false
    persistCredentials: true
    submodules: true

  # Use Python Version
  # Retrieves the specified version of Python from the tool cache. Optionally add it to PATH.
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - powershell: '$(Build.SourcesDirectory)/scripts/verify-windows.ps1'
    displayName: 'Run verify-windows.ps1'

  - script: |
       git add --renormalize . && git diff-index --quiet HEAD --
       IF %ERRORLEVEL% NEQ 0 (
         echo "Please renormalize files before pushing using git add --renormalize ."
         git status
         exit /b 1
       )
       exit /b 0
    displayName: 'Check Line Endings'

  - task: BatchScript@1
    displayName: 'Setup VS Env'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\VsDevCmd.bat'
      arguments: '-arch=$(CMakeArch)'
      modifyEnvironment: true
    condition: and(succeeded(), eq(variables['vmImage'], 'vs2017-win2016'))

  - task: BatchScript@1
    displayName: 'Setup VS Env'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat'
      arguments: '-arch=$(CMakeArch)'
      modifyEnvironment: true
    condition: and(succeeded(), eq(variables['vmImage'], 'windows-2019'))

  - powershell: |
      $ErrorActionPreference = "Stop"

      function Download-ToTemp
      {
          param
          (
              [Parameter(Mandatory)]
              [string] $url,
              [string] $filename
          )

          if (-not ($filename))
          {
              $filename = Split-Path -Path $url -Leaf
          }

          if (-not ($filename))
          {
              Write-Error "Unable to parse filename from $url"
              return $null
          }

          $tempDir = [System.IO.Path]::GetTempPath()
          $path = Join-Path -Path $tempDir -ChildPath $filename

          Write-Host -NoNewline "Downloading $url to $path..."
          Invoke-WebRequest -Uri $url -OutFile $path -UserAgent "NativeClient"
          Write-Host "Done"

          return $path
      }

      # Download NASM
      $url = "https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/win64/nasm-2.14.02-win64.zip"
      $nasmzip = Download-ToTemp -url $url

      Expand-Archive $nasmzip .\nasmexe
      Write-Host "NASM Downloaded"

    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Download NASM'

  - script: |
      set PATH=%PATH%;$(Build.BinariesDirectory)\nasmexe\nasm-2.14.02
      cmake -G "$(BuildGenerator)" "-DCMAKE_VERBOSE_MAKEFILE=ON" "$(Build.SourcesDirectory)" "-DCMAKE_BUILD_TYPE=$(CMakeConfiguration)"
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'CMake Configure'
    env:
      CC: cl
      CXX: cl

  - task: CMake@1
    displayName: 'CMake Build'
    inputs:
      workingDirectory: '$(Build.BinariesDirectory)'
      cmakeArgs: '--build . --config "$(CMakeConfiguration)"'

  - task: CMake@1
    displayName: 'CMake Build Package'
    inputs:
      workingDirectory: '$(Build.BinariesDirectory)'
      cmakeArgs: '--build . --config "$(CMakeConfiguration)" --target package'

  - script: 'ctest -V -C "$(CMakeConfiguration)" -L unit'
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Unit Tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFiles: '**\TEST-*.xml'
      searchFolder: '$(Build.BinariesDirectory)'
      mergeTestResults: true
      testRunTitle: 'Unit Tests'
    condition: succeededOrFailed()

  - task: CopyFiles@2
    displayName: 'Copy build folder to Staging'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)'
      Contents: |
        *
        bin/*
        docs/**/*
        CMakeFiles/**/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Build folder'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(CMakeArch)-windows-msvc-$(CMakeConfiguration)'
      parallel: true
      parallelCount: 8
    condition: and(succeeded(), and(eq(variables['vmImage'], 'vs2017-win2016'), eq(variables['BuildGenerator'], 'Ninja')))

  # This will publish symbols created from this build to the Azure DevOps symbol
  # server. This symbol server will be private to Microsoft internal.
  - task: PublishSymbols@2
    displayName: 'Publish K4A Symbols'
    inputs:
      symbolsFolder: '$(Build.BinariesDirectory)'
      searchPattern: 'bin/*.pdb'
      indexSources: true
      publishSymbols: true
      symbolServerType: 'teamServices'
    condition: and(succeeded(), and(eq(variables['vmImage'], 'vs2017-win2016'), eq(variables['BuildGenerator'], 'Ninja')))

- job: LinuxK4ABuildTest
  displayName: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    maxParallel: 100
    matrix:
      x64-clang_debug_ninja:
        CMakeLinuxTargetTriple: 'x86_64-linux-clang'
        CMakeConfiguration: 'debug'
        CMakeFlags: '-DK4A_ENABLE_ADDRESS_SANITIZATION=ON'
      x64-gnu_debug_ninja:
        CMakeLinuxTargetTriple: 'x86_64-linux-gnu'
        CMakeConfiguration: 'debug'
        CMakeFlags: '-DK4A_ENABLE_ADDRESS_SANITIZATION=ON'
      x64-clang_rel_ninja:
        CMakeLinuxTargetTriple: 'x86_64-linux-clang'
        CMakeConfiguration: 'relwithdebinfo'
        CMakeFlags: ''
      x64-gnu_rel_ninja:
        CMakeLinuxTargetTriple: 'x86_64-linux-gnu'
        CMakeConfiguration: 'relwithdebinfo'
        CMakeFlags: ''

      # 32-bit builds are currently broken
      # i386-unknown-linux-clang_debug_ninja:
      #   CMakeLinuxTargetTriple: 'i386-linux-clang'
      #   CMakeConfiguration: 'debug'
      # i386-unknown-linux-gnu_debug_ninja:
      #   CMakeLinuxTargetTriple: 'i386-linux-gnu'
      #   CMakeConfiguration: 'debug'
      # i386-unknown-linux-clang_relwithdebinfo_ninja:
      #   CMakeLinuxTargetTriple: 'i386-linux-clang'
      #   CMakeConfiguration: 'relwithdebinfo'
      # i386-unknown-linux-gnu_relwithdebinfo_ninja:
      #   CMakeLinuxTargetTriple: 'i386-linux-gnu'
      #   CMakeConfiguration: 'relwithdebinfo'

  steps:
  - checkout: self
    clean: true
    fetchDepth: 20
    lfs: false
    persistCredentials: true
    submodules: true

  - task: ShellScript@2
    inputs:
      scriptPath: '$(Build.SourcesDirectory)/scripts/bootstrap-ubuntu.sh'
    displayName: 'Run bootstrap-ubuntu.sh'

  - script: |
       git add --renormalize . && git diff-index --quiet HEAD --
       if [ $? -ne 0 ]
       then
         echo "Please normalize files before pushing using git add --renormalize ."
         git status
         exit 1
       fi
    displayName: 'Check Line Endings'

  - script: 'cmake $(CMakeFlags) -GNinja -DCMAKE_VERBOSE_MAKEFILE=ON "$(Build.SourcesDirectory)" "-DCMAKE_BUILD_TYPE=$(CMakeConfiguration)" "-DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/cmake/toolchains/$(CMakeLinuxTargetTriple).cmake"'
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'CMake Configure'

  - task: CMake@1
    displayName: 'CMake Build'
    inputs:
      workingDirectory: '$(Build.BinariesDirectory)'
      cmakeArgs: '--build .'

  - task: CMake@1
    displayName: 'CMake Build Package'
    inputs:
      workingDirectory: '$(Build.BinariesDirectory)'
      cmakeArgs: '--build . --target package'

  - script: 'ctest -V -L unit'
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Unit Tests'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      searchFolder: '$(Build.BinariesDirectory)'
      mergeTestResults: true
      testRunTitle: 'Unit Tests'
    condition: succeededOrFailed()

  - task: CopyFiles@2
    displayName: 'Copy build folder to Staging'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)'
      Contents: |
        *
        bin/*
        docs/**/*
        CMakeFiles/**/*
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Build folder'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(CMakeLinuxTargetTriple)-$(CMakeConfiguration)'
      parallel: true
      parallelCount: 8
    condition: and(succeeded(), contains(variables['CMakeLinuxTargetTriple'], 'clang'))

- job: DocumentationBuild
  displayName: Documentation Build
  pool:
    vmImage: 'vs2017-win2016'
    demands:
      - Cmd

  steps:
  - checkout: self
    clean: true
    fetchDepth: 20
    lfs: false
    persistCredentials: true
    submodules: true

  - task: BatchScript@1
    displayName: 'Setup VS2017 Env'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\VsDevCmd.bat'
      modifyEnvironment: true

  - powershell: |
      $ErrorActionPreference = "Stop"

      function Download-ToTemp
      {
          param
          (
              [Parameter(Mandatory)]
              [string] $url,
              [string] $filename
          )

          if (-not ($filename))
          {
              $filename = Split-Path -Path $url -Leaf
          }

          if (-not ($filename))
          {
              Write-Error "Unable to parse filename from $url"
              return $null
          }

          $tempDir = [System.IO.Path]::GetTempPath()
          $path = Join-Path -Path $tempDir -ChildPath $filename

          Write-Host -NoNewline "Downloading $url to $path..."
          Invoke-WebRequest -Uri $url -OutFile $path -UserAgent "NativeClient"
          Write-Host "Done"

          return $path
      }

      # Download Doxygen
      $url = "https://sourceforge.net/projects/doxygen/files/rel-1.8.14/doxygen-1.8.14.windows.bin.zip/download"
      $filename = "doxygen-1.8.14.windows.bin.zip"
      $doxygenzip = Download-ToTemp -url $url -filename $filename

      Expand-Archive $doxygenzip .\doxygenexe
      Write-Host "Doxygen installed. Please use Visual Studio Developer Command prompt to build."

    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Download doxygen'

  - script: |
      set PATH=%PATH%;$(Build.BinariesDirectory)\doxygenexe
      cmake -G Ninja "-DK4A_BUILD_DOCS:BOOL=ON" "-DCMAKE_VERBOSE_MAKEFILE=ON" "-DSOURCE_BRANCH=$(Build.SourceBranch)" "$(Build.SourcesDirectory)"

    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'CMake Configure'
    env:
      CC: cl
      CXX: cl

  - task: CMake@1
    displayName: 'CMake Build'
    inputs:
      workingDirectory: '$(Build.BinariesDirectory)'
      cmakeArgs: '--build . --target k4adocs'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Documentation'
    inputs:
      PathtoPublish: '$(Build.BinariesDirectory)\docs'
      ArtifactName: docs
      parallel: true
      parallelCount: 8

  - task: PowerShell@2
    displayName: 'Publish Documentation HTML'
    inputs:
      targetType: 'filePath'
      filePath: '$(Build.SourcesDirectory)\doxygen\PublishDocs.ps1'
    condition: and(eq(variables['System.CollectionId'], 'cb55739e-4afe-46a3-970f-1b49d8ee7564'), and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')))


- ${{ if eq(variables['System.CollectionId'], 'cb55739e-4afe-46a3-970f-1b49d8ee7564') }}:
  - job: WindowsFunctionalTests
    displayName: Windows Functional Test
    dependsOn: WindowsK4ABuildTest
    variables:
      firmware_version: "$(windows_firmware_version)"
    pool:
      name: Analog-FwConnected
      demands:
      - Eden
      - Agent.OS -equals Windows_NT

    steps:
    - checkout: self
      clean: true
      lfs: false
      persistCredentials: true
      submodules: false

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: 'amd64-windows-msvc-RelWithDebInfo'
        parallelizationLimit: 8

    - powershell: |
         $null = New-Item -ItemType Directory -Force -Ea 0 -Path "$(System.ArtifactsDirectory)\depthengineplugin\windows\amd64\debug"
         Invoke-WebRequest -uri "$(ResourceBaseUrl)/depthengineplugin/1.0.5/windows/amd64/debug/depthengine_1_0.dll$(ResourceToken)" -OutFile "$(System.ArtifactsDirectory)\depthengineplugin\windows\amd64\debug\depthengine_1_0.dll"
         $null = New-Item -ItemType Directory -Force -Ea 0 -Path "$(System.ArtifactsDirectory)\depthengineplugin\windows\amd64\release"
         Invoke-WebRequest -uri "$(ResourceBaseUrl)/depthengineplugin/1.0.5/windows/amd64/release/depthengine_1_0.dll$(ResourceToken)" -OutFile "$(System.ArtifactsDirectory)\depthengineplugin\windows\amd64\release\depthengine_1_0.dll"
         $null = New-Item -ItemType Directory -Force -Ea 0 -Path "$(System.ArtifactsDirectory)\depthengineplugin\windows\x86\debug"
         Invoke-WebRequest -uri "$(ResourceBaseUrl)/depthengineplugin/1.0.5/windows/x86/debug/depthengine_1_0.dll$(ResourceToken)" -OutFile "$(System.ArtifactsDirectory)\depthengineplugin\windows\x86\debug\depthengine_1_0.dll"
         $null = New-Item -ItemType Directory -Force -Ea 0 -Path "$(System.ArtifactsDirectory)\depthengineplugin\windows\x86\release"
         Invoke-WebRequest -uri "$(ResourceBaseUrl)/depthengineplugin/1.0.5/windows/x86/release/depthengine_1_0.dll$(ResourceToken)" -OutFile "$(System.ArtifactsDirectory)\depthengineplugin\windows\x86\release\depthengine_1_0.dll"
         $null = New-Item -ItemType Directory -Force -Ea 0 -Path "$(System.ArtifactsDirectory)\firmware"
         Invoke-WebRequest -uri "$(ResourceBaseUrl)/firmware/AzureKinectDK_Fw_$(firmware_version).bin$(ResourceToken)" -OutFile "$(System.ArtifactsDirectory)\firmware\AzureKinectDK_Fw_$(firmware_version).bin"
      displayName: 'Download Resources'


    - task: CopyFiles@2
      displayName: "Copy DepthEnginePlugin into bin folder"
      inputs:
        sourceFolder: "$(System.ArtifactsDirectory)/depthengineplugin/windows/amd64/release/"
        contents: "depthengine*.dll"
        targetFolder: "$(System.ArtifactsDirectory)/amd64-windows-msvc-RelWithDebInfo/bin"
        flattenFolders: true

    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: './scripts/Reset-Device.ps1'
      displayName: 'Reset K4A Device'

    - script: '.\amd64-windows-msvc-RelWithDebInfo\bin\AzureKinectFirmwareTool.exe -u firmware/AzureKinectDK_Fw_$(firmware_version).bin'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Update Device'

    - script: '.\amd64-windows-msvc-RelWithDebInfo\bin\enumerate_devices.exe'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Check Device Health'

    - script: 'python $(Build.SourcesDirectory)/scripts/RunTestList.py --list amd64-windows-msvc-RelWithDebInfo/bin/functional_test_list.txt --bin amd64-windows-msvc-RelWithDebInfo/bin/ --output=xml --gtestargs "--gtest_filter=-*ONBOARDING*"'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Run Functional Tests'
      timeoutInMinutes: 15

    - script: 'python $(Build.SourcesDirectory)/scripts/RunTestList.py --list amd64-windows-msvc-RelWithDebInfo/bin/functional_test_list.txt --bin amd64-windows-msvc-RelWithDebInfo/bin/ --output=xml --gtestargs "--gtest_filter=*ONBOARDING*"'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Run Functional Tests - Onboarding'
      timeoutInMinutes: 15
      continueOnError: true

    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: './scripts/Reset-Device.ps1'
      displayName: 'Reset K4A Device'


- ${{ if eq(variables['System.CollectionId'], 'cb55739e-4afe-46a3-970f-1b49d8ee7564') }}:
  - job: LinuxFunctionalTests
    displayName: Linux Functional Test
    dependsOn: LinuxK4ABuildTest
    variables:
      firmware_version: "$(linux_firmware_version)"
    pool:
      name: Analog-FwConnected
      demands:
      - Eden
      - Agent.OS -equals Linux

    steps:
    - checkout: self
      clean: true
      lfs: false
      persistCredentials: true
      submodules: true

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: 'x86_64-linux-clang-RelWithDebInfo'
        parallelizationLimit: 8


    - task: CmdLine@2
      displayName: 'Download Azure Kinect Firmware'
      inputs:
        script: curl "$(ResourceBaseUrl)/firmware/AzureKinectDK_Fw_$(firmware_version).bin$(ResourceToken)" --output $(System.ArtifactsDirectory)/firmware/AzureKinectDK_Fw_$(firmware_version).bin --create-dirs
                
    - task: CmdLine@2
      displayName: 'Download DepthEngine Plugin'
      inputs:
        script: |
         curl "$(ResourceBaseUrl)/depthengineplugin/1.0.5/linux/x86_64/debug/libdepthengine.so.1.0$(ResourceToken)" --output $(System.ArtifactsDirectory)/depthengineplugin/linux/x86_64/debug/libdepthengine.so.1.0 --create-dirs
         curl "$(ResourceBaseUrl)/depthengineplugin/1.0.5/linux/x86_64/debug/libdepthengine.so$(ResourceToken)" --output $(System.ArtifactsDirectory)/depthengineplugin/linux/x86_64/debug/libdepthengine.so --create-dirs
         curl "$(ResourceBaseUrl)/depthengineplugin/1.0.5/linux/x86_64/release/libdepthengine.so.1.0$(ResourceToken)" --output $(System.ArtifactsDirectory)/depthengineplugin/linux/x86_64/release/libdepthengine.so.1.0 --create-dirs
         curl "$(ResourceBaseUrl)/depthengineplugin/1.0.5/linux/x86_64/release/libdepthengine.so$(ResourceToken)" --output $(System.ArtifactsDirectory)/depthengineplugin/linux/x86_64/release/libdepthengine.so --create-dirs

    - task: CmdLine@2
      displayName: 'Download findconnectedport'
      inputs:
        script:  curl "$(ResourceBaseUrl)/findconnectedport/linux/findconnectedport$(ResourceToken)" --output $(System.ArtifactsDirectory)/findconnectedport/linux/findconnectedport --create-dirs

    - script: 'chmod +x $(System.ArtifactsDirectory)/findconnectedport/linux/*'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Add execution property to findconnectedport'

    - task: CopyFiles@2
      displayName: "Copy DepthEnginePlugin into Build Artifacts"
      inputs:
        sourceFolder: "$(System.ArtifactsDirectory)/depthengineplugin/linux/x86_64/release/"
        contents: "libdepthengine.so*"
        targetFolder: "$(System.ArtifactsDirectory)/x86_64-linux-clang-relwithdebinfo/bin/"
        flattenFolders: true

    - script: 'chmod +x ./x86_64-linux-clang-relwithdebinfo/bin/*'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Add execution property to binary files'

      # Set the DISPLAY variable since DepthEngine needs to open a display window (even there is no visual display).
    - script: 'echo "##vso[task.setvariable variable=DISPLAY]:0"'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'set DISPLAY variable'

    - script: 'env && which xauth && glxinfo | grep "OpenGL"'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Check openGL version'

    - script: 'stty -F /dev/ttyACM0 -hupcl'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Prevent the USB connector from accidentally being reset'

      # The binary is built from https://microsoft.visualstudio.com/Analog/_git/systems.rustyhmdkit
      # Wait a little bit so the device can enumerate, 3 seconds has seemed good.
    - script: '$(System.ArtifactsDirectory)/findconnectedport/linux/findconnectedport && sleep 3'
      workingDirectory: '$(System.ArtifactsDirectory)/findconnectedport/linux/'
      displayName: 'Reset K4A Device'

    - script: './x86_64-linux-clang-relwithdebinfo/bin/AzureKinectFirmwareTool -u firmware/AzureKinectDK_Fw_$(firmware_version).bin'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Update Device'
      env:
        K4A_LOG_LEVEL: 'I'

    - script: './x86_64-linux-clang-relwithdebinfo/bin/enumerate_devices'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Check Device Health'

    - script: 'python $(Build.SourcesDirectory)/scripts/RunTestList.py --list x86_64-linux-clang-relwithdebinfo/bin/functional_test_list.txt --bin x86_64-linux-clang-relwithdebinfo/bin/ --output=xml --gtestargs "--gtest_filter=-*ONBOARDING*"'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Run Functional Tests'
      timeoutInMinutes: 15

    - script: 'python $(Build.SourcesDirectory)/scripts/RunTestList.py --list x86_64-linux-clang-relwithdebinfo/bin/functional_test_list.txt --bin x86_64-linux-clang-relwithdebinfo/bin/ --output=xml --gtestargs "--gtest_filter=*ONBOARDING*"'
      workingDirectory: '$(System.ArtifactsDirectory)'
      displayName: 'Run Functional Tests - Onboarding'
      timeoutInMinutes: 15
      continueOnError: true

    # The binary is built from https://microsoft.visualstudio.com/Analog/_git/systems.rustyhmdkit
    - script: '$(System.ArtifactsDirectory)/findconnectedport/linux/findconnectedport'
      workingDirectory: '$(System.ArtifactsDirectory)/findconnectedport/linux/'
      displayName: 'Reset K4A Device'
