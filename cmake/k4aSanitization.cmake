include_guard(GLOBAL)

if (K4A_ENABLE_THREAD_SANITIZATION AND K4A_ENABLE_ADDRESS_SANITIZATION)
    message(FATAL_ERROR "K4A_ENABLE_THREAD_SANITIZATION and K4A_ENABLE_ADDRESS_SANITIZATION may not be enabled at the same time")
endif()

if (K4A_ENABLE_THREAD_SANITIZATION)
    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=thread")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=thread")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=thread")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=thread")
        set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -fsanitize=thread")
    else()
        message(FATAL_ERROR "K4A_ENABLE_THREAD_SANITIZATION is only available with Clang or GCC")
    endif()
endif()

if (K4A_ENABLE_ADDRESS_SANITIZATION)
    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address -fsanitize=leak")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fsanitize=address -fsanitize=leak")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address -fsanitize=leak")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address -fsanitize=leak")
        set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -fsanitize=address -fsanitize=leak")
    else()
        message(FATAL_ERROR "K4A_ENABLE_ADDRESS_SANITIZATION is only available with Clang or GCC")
    endif()
endif()
